# -*- coding: utf-8 -*-
"""Final version -0118-CS246 - Homework 1-1_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_JhX9hEHx_fEzo2baWWbt-yuNOcZp8AH

# CS246 - Homework 1-1
## Find mutual friends

### Setup

Let's setup Spark on your Colab environment.  Run the cell below!
"""

!pip install pyspark
!pip install -U -q PyDrive
!apt install openjdk-8-jdk-headless -qq
import os
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-8-openjdk-amd64"

"""Now we authenticate a Google Drive client to download the file we will be processing in our Spark job.

**Make sure to follow the interactive instructions.**
"""

from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

# Authenticate and create the PyDrive client
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

"""### Your task"""

from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark import SparkContext
import pandas as pd

# create the Spark Session
spark = SparkSession.builder.getOrCreate()
  
# create the Spark Context
sc = spark.sparkContext

rdd = sc.textFile("soc-LiveJournal1Adj.txt")

import re

def candidates(l):
    uvs = re.split(r'[,\t]', l.strip()) # '0' '2' '3' '4'
    uvs = list(map(int,uvs)) # 0, 2 , 3, 4
    #Create all possible pairs and output to 1
    vs = uvs[1:]
    result = []
    for p1 in range(len(vs)):
      for p2 in range(p1+1,len(vs)):
        result.append(((vs[p1],vs[p2]),1))
    #return result
    #Create pairs that they are already friends and output to a very negative value
    friends=[]
    for i in range(len(uvs)-1):
      if uvs[0] < uvs[i+1]:
        friends.append(((uvs[0], uvs[i+1]),-100000))
      else:
        friends.append(((uvs[i+1], uvs[0]),-100000))
    #return friends
    total =  friends + result
    return total

c = rdd.flatMap(candidates)
c.take(5)

pairs = c.reduceByKey(lambda x, y: x + y) # ((a b) num)
pairs = c.filter(lambda kv: kv[1] > 0) # filter connected

pairs.take(5)

rdd_new = pairs.map(lambda x: (x[0][0], (x[1], x[0][1])))
#rdd_new.take(5)
suggest2 = rdd_new.groupByKey()
#suggest.take(5)

def suggest(suggest):
    x, yz = suggest
    yz = sorted(yz, key=lambda v: (-v[0], v[1]))
    yz = yz[:10]
    yz = list(zip(*yz))[1]
    return x, yz

suggest3 = suggest2.map(suggest)
suggest4 = suggest3.sortBy(lambda x_yz: x_yz[0])

suggest4.take(100000)

suggest4.saveAsTextFile("\myoutput.txt")